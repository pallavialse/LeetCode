class Solution {
public:
    string longestPalindrome(string s) {
        int len = s.size();
        int begin = 0;
        int maxLen = 1;
        if(len == 0 || len == 1)
            return s;
        vector<vector<bool>> table(len);
        for(int i = 0; i < len; i++)
            table[i].resize(len);
        for(int i = 0; i < len; i++)
        {
                    table[i][i] = true;
        }
        for(int i = 0; i < len-1; i++)
        {
            if(s[i] == s[i+1])
            {
                table[i][i+1] = true;
                begin = i;
                maxLen = 2;
            }   
        }
        for(int curLen = 3; curLen <= len; curLen++)
        {
            for(int i = 0; i<len-curLen+1; i++)
            {
                int j = i+curLen-1;
                if((s[i] == s[j]) && table[i+1][j-1])
                {
                    table[i][j] = true;
                    begin = i;
                    maxLen = curLen;
                    
                }
            }
        }
        
        return s.substr(begin,maxLen);
    }
};